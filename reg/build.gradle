import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'war'
}

repositories {
    jcenter()
    mavenLocal()
}

sourceCompatibility = 1.7

group = 'org.opencadc'

version = '1000'

ext {
    default_app_name = 'reg'
}

war {
    if (project.hasProperty('alma_reg_app_name')) {
        eachFile {
            if (it.name.equals('capabilities.xml') || it.name.equals('service.json')) {
                filter(ReplaceTokens, tokens: [app_name: project.alma_reg_app_name])
            }
        }
        archiveName = project.alma_reg_app_name + '##' + project.version + '.war'
    } else {
        eachFile {
            if (it.name.equals('capabilities.xml') || it.name.equals('service.json')) {
                filter(ReplaceTokens, tokens: [app_name: project.default_app_name])
            }
        }
        archiveName = project.default_app_name + '##' + project.version + '.war'
    }

    // Include the swagger-ui so that /reg provides the Reg API documentation
    from('../') {
        include 'swagger-ui/'
    }
}

sourceSets {
    intTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/intTest/java')
        }

        // set the intTest resource directory
        resources.srcDir file('src/intTest/resources')
    }
}

configurations {
    intTestCompile.extendsFrom testCompile
    intTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile 'log4j:log4j:1.2.+'
    providedCompile 'javax.servlet:javax.servlet-api:3.1.+'

    compile 'org.opencadc:cadc-util:1.+'
    compile 'org.opencadc:cadc-log:1.+'
    compile 'org.opencadc:cadc-access-control-identity:[1.0,)'
    compile 'org.opencadc:cadc-vosi:[1.1,2.0)'
    compile 'org.opencadc:cadc-dali:[1.1,)'
    compile 'org.opencadc:cadc-uws-server:[1.2.0,)'
    compile 'org.opencadc:cadc-registry:[1.4.6,)'
    compile 'org.opencadc:cadc-registry-server:[1.0.0,)'

    testCompile 'junit:junit:[4.0,5.0)'

    intTestCompile 'org.opencadc:cadc-test-vosi:[1.0.2,)'
}


tasks.withType(Test) {
    // reset the report destinations so that intTests go to their
    // own page
    //reports.html.destination = file("${reporting.baseDir}/${name}")
    reports.html.destination = file(reporting.baseDir.getAbsolutePath() + '/' + name)

    // Assign all Java system properties from
    // the command line to the tests
    systemProperties System.properties
}

task intTest(type: Test) {
    // set the configuration context
    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath

    // run the tests always
    outputs.upToDateWhen { false }
}

test {
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        // "STARTED",
    }
}

intTest {
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        // "STARTED",
    }
}
